% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/name.R
\name{neuprint_search}
\alias{neuprint_search}
\alias{neuprint_ids}
\title{Search for body IDs based on a given name}
\usage{
neuprint_search(
  search,
  field = "name",
  fixed = FALSE,
  exact = NULL,
  meta = TRUE,
  all_segments = FALSE,
  dataset = NULL,
  conn = NULL,
  ...
)

neuprint_ids(
  x,
  mustWork = TRUE,
  unique = TRUE,
  fixed = TRUE,
  conn = NULL,
  dataset = NULL,
  ...
)
}
\arguments{
\item{search}{Search query, by default a regular expression that must match
the whole of the neuPrint instance name field. See examples and the
\code{field}, \code{fixed} and \code{exact} for how this can be modified.}

\item{field}{the meta data field in which you want a match for your search
query. Defaults to name (or instance, as handled by
\code{neuprintr:::neuprint_name_field}). Other common options include type,
status, cellBodyFiber etc.}

\item{fixed}{if \code{FALSE} (the default), \code{search} is interpreted as a
regular expression (i.e. "Advanced input" in neuPrint Explorer). If
\code{TRUE}, the string \code{search} is interpreted as a simple character
string to be matched (the default search behavior in neuPrint explorer). In
this case partial matches are fine.}

\item{exact}{Whether the query must match the whole field. This is always
true for regular expression queries while the default (\code{NULL}) implies
false for \code{fixed} queries.}

\item{meta}{if \code{TRUE}, meta data for found bodyids is also pulled}

\item{all_segments}{if TRUE, all bodies are considered, if FALSE, only
'Neurons', i.e. bodies with a status roughly traced status.}

\item{dataset}{optional, a dataset you want to query. If \code{NULL}, the
default specified by your R environ file is used or, failing that the
current connection, is used. See \code{\link{neuprint_login}} for details.}

\item{conn}{optional, a neuprintr connection object, which also specifies the
neuPrint server. If NULL, the defaults set in your
\code{\link[=Startup]{.Rprofile}} or \code{\link[=Startup]{.Renviron}} are
used. See \code{\link{neuprint_login}} for details.}

\item{...}{Additional arguments passed to \code{\link{neuprint_search}}}

\item{x}{A set of bodyids or a query}

\item{mustWork}{Whether to insist that at least one valid id is returned
(default \code{TRUE})}

\item{unique}{Whether to ensure that only unique ids are returned (default
\code{TRUE})}
}
\value{
a vector of body ids, or a data frame with their meta information

For \code{neuprint_ids}, a character vector of bodyids (of length 0
  when there are none and \code{mustWork=FALSE}).
}
\description{
\code{neuprint_search} searches for bodyids corresponding to a
  given name. By default performs regex sensitive matches against neuron
  \bold{name}s and returns a \code{data.frame}.

\code{neuprint_ids} provides for flexible search / specification
  of neuprint body ids. Use it at the start of any function that accepts body
  ids. Queries are by default partial and fixed (i.e. non-regex) against
  type. Returns a character vector of bodyids.
}
\section{Standard query syntax}{
 It is probably best just to look at the
  examples, but the query syntax is as follows where square brackets denote
  optional parts:

  \code{[!/][<field>:]<query>}

  Starting with the optional leading character. An exclamation mark denotes
  an exact, fixed search. The / denotes a regular expression (exact) search.
  When both are missing, a partial, fixed search is carried out.

  The optional field argument terminated by a colon defines a field other
  than the default one to use for the query.

  Finally the query itself is a plain text (fixed) or regular expression
  query.
}

\section{Extended query syntax}{
 As a stepping stone to writing full CYPHER
  queries against Neo4J you can used the special \code{where} keyword to
  introduce your queries:

  \code{where:<cypher query>}

  e.g.

  \code{"where:exists(n.somaLocation) AND n.post>30000 AND NOT n.cropped"}

  Note that properties of individual nodes (i.e. neurons) must be prefixed
  with \code{n.} as would be typical in a CYPHER query. This feature is still
  experimental and details of the interface may still change. If you have
  feedback please do so at
  \url{https://github.com/natverse/neuprintr/pull/153}.
}

\examples{
\donttest{
neuprint_search(".*DA2.*")
neuprint_search(".*DA2.*", meta=FALSE)

# Search the type field
neuprint_search("MBON.*", field = "type", meta=FALSE)
neuprint_search("MBON[0-9]+", field = "type", meta=FALSE)

# compact specification of field
neuprint_search("type:MBON[0-9]+", meta=FALSE)

# starts with MBON
neuprint_search("type:MBON.*", meta=FALSE)

# full access to WHERE cypher queries over nodes (i.e. neurons) in neo4j
# NB fields must be prefixed with n. to indicate that they are node properties.
# note also that exists(n.somaLocation) is cypher to ensure soma==TRUE
neuprint_search("where:exists(n.somaLocation) AND n.post>30000 AND NOT n.cropped")
}

\dontrun{
neuprint_search("MBON.*", field = "type")

# fixed=TRUE can be useful when you don't want to worry about special
# characters like brackets
neuprint_search("PEN_a(PEN1)", field="type", fixed=TRUE)
# by default fixed=TRUE returns partial matches
neuprint_search("MBON16", field = "type", fixed=TRUE)
# here the type must exactly match the query i.e. complete match
neuprint_search("MBON16", field = "type", fixed=TRUE, exact = TRUE)

neuprint_search("AVF1", field = "cellBodyFiber")
neuprint_search("cellBodyFiber:AVF1")
}
\donttest{
# exact match against whole type
neuprint_ids("!MBON01")
# partial match
neuprint_ids("MBON01")
# partial match against name field rather than type
neuprint_ids("name:MBON01")

# initial / indicates to use regex search (which must be exact)
neuprint_ids("/MBON01")
# more interesting regex search
neuprint_ids("/MBON0[1-4]")

# partial regex search against the name field (note leading/trailing .*)
neuprint_ids("/name:.*MBON0[1-4].*")
}
}
\seealso{
\code{\link{neuprint_get_meta}},
  \code{\link{neuprint_get_neuron_names}}
}
